# Schema for Graphql server

# Query (read)
type Query {
  user: User
  users: [User]!
  product(id: ID!): Product
  products: [Product]!
}

# Mutation (create, delete, update)
type Mutation {
  login(email: String!, password: String!): AuthData!
  signup(name: String!, email: String!, password: String!): User
  requestResetPassword(email: String!): Message!
  resetPassword(password: String!, token: String!): Message!
  createProduct(desc: String!, price: Float!, imageUrl: String!): Product!
  updateProduct(id: ID!, desc: String, price: Float, imageUrl: String): Product!
  addToCart(id: ID!): CartItem!
  deleteCart(id: ID!): CartItem!
  createOrder(amount: Float!, token: String): Order
}

scalar Date

# A user has id, name, email, password, products, carts, createdAt (user model)
type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  products: [Product]
  carts: [CartItem]!
  orders: [Order]!
  cardIds: [String]!
  createdAt: Date!
}

# A prodcut has id, desc, price, image, user(creator)
type Product {
  id: ID!
  desc: String!
  price: Float!
  imageUrl: String!
  user: User!
  createdAt: Date!
}

# A cartitem has id(product id), product, quantity, user(who logged in), createdAt
type CartItem {
  id: ID!
  product: Product!
  quantity: Int!
  user: User!
  createdAt: Date!
}

# An AuthData has id(user who logged in), token
type AuthData {
  user: User
  jwt: String
}

# A message for reset password
type Message {
  message: String!
}

# Order
type Order {
  id: ID!
  user: User!
  items: [OrdersItem!]!
  createdAt: Date!
}

type OrdersItem {
  id: ID!
  product: Product!
  quantity: Int!
  user: User!
  createdAt: Date!
}
